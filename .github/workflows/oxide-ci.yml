name: Oxide CI

on:
  push:
    branches:
      - oxide

env:
  APP_NAME: tailwindcss-oxide
  NODE_VERSION: 14

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          # Mac OS
          - os: macos-latest
            target: x86_64-apple-darwin
            strip: strip -x # Must use -x on macOS. This produces larger results on linux.

    name: build-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Setup rust target
        run: rustup target add ${{ matrix.target }}

      - name: Use cached main node_modules
        id: cache-main
        uses: actions/cache@v3
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('./package-lock.json') }}-${{ matrix.os }}-${{ matrix.target }}-${{ env.NODE_VERSION }}
          restore-keys: |
            nodeModules-

      - name: npm install (main)
        if: steps.cache-main.outputs.cache-hit != 'true'
        run: npm install

      - name: Use cached oxide node_modules
        id: cache-oxide
        uses: actions/cache@v3
        with:
          path: ./oxide/crates/node/node_modules
          key: nodeModules-${{ hashFiles('./oxide/crates/node/package-lock.json') }}-${{ matrix.os }}-${{ matrix.target }}-${{ env.NODE_VERSION }}
          restore-keys: |
            nodeModules-

      - name: npm install (oxide)
        if: steps.cache-oxide.outputs.cache-hit != 'true'
        run: npm run oxide:install

      - name: Build release
        run: npm run oxide:build
        env:
          RUST_TARGET: ${{ matrix.target }}

      - name: Strip debug symbols # https://github.com/rust-lang/rust/issues/46034
        if: ${{ matrix.strip }}
        run: ${{ matrix.strip }} ./oxide/crates/node/*.node

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.target }}
          path: |
            ./oxide/crates/node/*.node
            ${{ matrix.binary }}

  build-apple-silicon:
    name: build-apple-silicon
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Setup rust target
        run: rustup target add aarch64-apple-darwin

      - name: Use cached main node_modules
        id: cache-main
        uses: actions/cache@v3
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('./package-lock.json') }}-macos-latest-apple-silicon-${{ env.NODE_VERSION }}
          restore-keys: |
            nodeModules-

      - name: npm install (main)
        if: steps.cache-main.outputs.cache-hit != 'true'
        run: npm install

      - name: Use cached oxide node_modules
        id: cache-oxide
        uses: actions/cache@v3
        with:
          path: ./oxide/crates/node/node_modules
          key: nodeModules-${{ hashFiles('./oxide/crates/node/package-lock.json') }}-macos-latest-apple-silicon-${{ env.NODE_VERSION }}
          restore-keys: |
            nodeModules-

      - name: npm install (oxide)
        if: steps.cache-oxide.outputs.cache-hit != 'true'
        run: npm run oxide:install

      - name: Build release
        run: npm run oxide:build
        env:
          RUST_TARGET: aarch64-apple-darwin
          JEMALLOC_SYS_WITH_LG_PAGE: 14

      - name: Strip debug symbols # https://github.com/rust-lang/rust/issues/46034
        run: strip -x ./oxide/crates/node/*.node

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bindings-aarch64-apple-darwin
          path: |
            ./oxide/crates/node/*.node
            ${{ env.APP_NAME }}

  build-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            strip: strip
            image: docker.io/centos/nodejs-12-centos7
          - target: aarch64-unknown-linux-gnu
            strip: aarch64-linux-gnu-strip
            image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            setup: apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y
          - target: armv7-unknown-linux-gnueabihf
            strip: arm-linux-gnueabihf-strip
            image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            setup: apt install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
          - target: aarch64-unknown-linux-musl
            image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            strip: aarch64-linux-musl-strip
          - target: x86_64-unknown-linux-musl
            image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            strip: strip

    name: build-${{ matrix.target }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Setup cross compile toolchain
        if: ${{ matrix.setup }}
        run: ${{ matrix.setup }}

      - name: Setup rust target
        run: rustup target add ${{ matrix.target }}

      - name: Use cached main node_modules
        id: cache-main
        uses: actions/cache@v3
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('./package-lock.json') }}-linux-${{ matrix.target }}-${{ env.NODE_VERSION }}
          restore-keys: |
            nodeModules-

      - name: npm install (main)
        if: steps.cache-main.outputs.cache-hit != 'true'
        run: npm install

      - name: Use cached oxide node_modules
        id: cache-oxide
        uses: actions/cache@v3
        with:
          path: ./oxide/crates/node/node_modules
          key: nodeModules-${{ hashFiles('./oxide/crates/node/package-lock.json') }}-linux-${{ matrix.target }}-${{ env.NODE_VERSION }}
          restore-keys: |
            nodeModules-

      - name: npm install (oxide)
        if: steps.cache-oxide.outputs.cache-hit != 'true'
        run: npm run oxide:install

      - name: Build release
        run: npm run oxide:build
        env:
          RUST_TARGET: ${{ matrix.target }}

      - name: Strip debug symbols # https://github.com/rust-lang/rust/issues/46034
        if: ${{ matrix.strip }}
        run: ${{ matrix.strip }} ./oxide/crates/node/*.node

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.target }}
          path: |
            ./oxide/crates/node/*.node
            ${{ env.APP_NAME }}

  release:
    runs-on: ubuntu-latest
    name: Build and release
    needs:
      - build
      - build-linux
      - build-apple-silicon
    steps:
      - uses: actions/checkout@v1

      - name: Use cached main node_modules
        id: cache-main
        uses: actions/cache@v3
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('./package-lock.json') }}-ubuntu-latest-${{ env.NODE_VERSION }}
          restore-keys: |
            nodeModules-

      - name: npm install (main)
        if: steps.cache-main.outputs.cache-hit != 'true'
        run: npm install

      - name: Use cached oxide node_modules
        id: cache-oxide
        uses: actions/cache@v3
        with:
          path: ./oxide/crates/node/node_modules
          key: nodeModules-${{ hashFiles('./oxide/crates/node/package-lock.json') }}-ubuntu-latest-${{ env.NODE_VERSION }}
          restore-keys: |
            nodeModules-

      - name: npm install (oxide)
        if: steps.cache-oxide.outputs.cache-hit != 'true'
        run: npm run oxide:install

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./oxide/crates/node

      - run: echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Move artifacts
        run: npm run artifacts --prefix ./oxide/crates/node

      - name: Resolve version
        id: vars
        run: |
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Generate entry point
        run: npm run build --prefix ./oxide/crates/node

      - name: Publish to npm
        run: |
          for pkg in ./oxide/crates/node/npm/*; do
            echo "Publishing $pkg..."
            cd $pkg
            npm version 0.0.0-insiders.${{ env.SHA_SHORT }} --force --no-git-tag-version
            npm publish --tag insiders --access public
            cd -
          done

          echo "Publishing ${{ env.APP_NAME }}...";
          cd ./oxide/crates/node
          npm version 0.0.0-insiders.${{ env.SHA_SHORT }} --force --no-git-tag-version
          sed "s#\"0.0.0\"#\"${{ env.SHA_SHORT }}\"#g" package.json > package_updated.json
          mv package_updated.json package.json
          npm publish --tag insiders --access public
          cd -
